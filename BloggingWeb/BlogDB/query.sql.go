// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package BlogDB

import (
	"context"
	"database/sql"
	"time"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (
  SELECT user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at FROM users WHERE email = $1
)
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserRegistration = `-- name: CheckUserRegistration :one
SELECT EXISTS (
  SELECT id, uid, email, password, first_name, last_name, role FROM user_credentials
    WHERE email = $1
)
`

func (q *Queries) CheckUserRegistration(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserRegistration, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteBlogByID = `-- name: DeleteBlogByID :exec
DELETE FROM blogs
    WHERE blog_id = $1
`

func (q *Queries) DeleteBlogByID(ctx context.Context, blogID int64) error {
	_, err := q.db.ExecContext(ctx, deleteBlogByID, blogID)
	return err
}

const getAllBlogs = `-- name: GetAllBlogs :many
SELECT blog_id, title, content, user_id, first_name, last_name, full_name, email FROM blogs
`

func (q *Queries) GetAllBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.BlogID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.FullName,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Role,
			&i.DateOfBirth,
			&i.UserAddress,
			&i.BlogsUploaded,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT blog_id, title, content, user_id, first_name, last_name, full_name, email FROM blogs
    WHERE blog_id = $1
`

func (q *Queries) GetBlogByID(ctx context.Context, blogID int64) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlogByID, blogID)
	var i Blog
	err := row.Scan(
		&i.BlogID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
	)
	return i, err
}

const getUserBlogs = `-- name: GetUserBlogs :many
SELECT blog_id, title, content, user_id, first_name, last_name, full_name, email FROM blogs
    WHERE user_id = $1
`

func (q *Queries) GetUserBlogs(ctx context.Context, userID int64) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getUserBlogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.BlogID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at FROM users 
    WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.DateOfBirth,
		&i.UserAddress,
		&i.BlogsUploaded,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.DateOfBirth,
		&i.UserAddress,
		&i.BlogsUploaded,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUid = `-- name: GetUserByUid :one
SELECT user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at FROM users
    WHERE user_id = $1
`

func (q *Queries) GetUserByUid(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUid, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.DateOfBirth,
		&i.UserAddress,
		&i.BlogsUploaded,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCredByEmail = `-- name: GetUserCredByEmail :one
SELECT id, uid, email, password, first_name, last_name, role FROM user_credentials
    WHERE email = $1
`

func (q *Queries) GetUserCredByEmail(ctx context.Context, email string) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, getUserCredByEmail, email)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (full_name, first_name, last_name, email, role, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at
`

type InsertUserParams struct {
	FullName  string
	FirstName string
	LastName  string
	Email     string
	Role      sql.NullString
	Status    sql.NullBool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.FullName,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Role,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.DateOfBirth,
		&i.UserAddress,
		&i.BlogsUploaded,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const postBlog = `-- name: PostBlog :one
INSERT INTO blogs (title, content, user_id, first_name, last_name, full_name,email)
VALUES ($1, $2, $3 , $4, $5, $6, $7)
RETURNING blog_id, title, content, user_id, first_name, last_name, full_name, email
`

type PostBlogParams struct {
	Title     string
	Content   string
	UserID    int64
	FirstName string
	LastName  string
	FullName  string
	Email     string
}

func (q *Queries) PostBlog(ctx context.Context, arg PostBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, postBlog,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Email,
	)
	var i Blog
	err := row.Scan(
		&i.BlogID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
	)
	return i, err
}

const saveUserCredentials = `-- name: SaveUserCredentials :exec
INSERT INTO 
    user_credentials (uid,email, password, role, first_name, last_name) 
    VALUES ($1, $2, $3, $4, $5, $6)
`

type SaveUserCredentialsParams struct {
	Uid       int64
	Email     string
	Password  string
	Role      string
	FirstName string
	LastName  string
}

func (q *Queries) SaveUserCredentials(ctx context.Context, arg SaveUserCredentialsParams) error {
	_, err := q.db.ExecContext(ctx, saveUserCredentials,
		arg.Uid,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.FirstName,
		arg.LastName,
	)
	return err
}

const saveUserSession = `-- name: SaveUserSession :exec
INSERT INTO user_sessions (uid, email, token, user_agent, role)
VALUES ($1, $2, $3, $4, $5)
`

type SaveUserSessionParams struct {
	Uid       int64
	Email     string
	Token     string
	UserAgent string
	Role      string
}

func (q *Queries) SaveUserSession(ctx context.Context, arg SaveUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, saveUserSession,
		arg.Uid,
		arg.Email,
		arg.Token,
		arg.UserAgent,
		arg.Role,
	)
	return err
}

const updateBlogsContent = `-- name: UpdateBlogsContent :one
UPDATE blogs
    SET content = $1, title = $2
    WHERE blog_id = $3
RETURNING blog_id, title, content, user_id, first_name, last_name, full_name, email
`

type UpdateBlogsContentParams struct {
	Content string
	Title   string
	BlogID  int64
}

func (q *Queries) UpdateBlogsContent(ctx context.Context, arg UpdateBlogsContentParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, updateBlogsContent, arg.Content, arg.Title, arg.BlogID)
	var i Blog
	err := row.Scan(
		&i.BlogID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
	)
	return i, err
}

const updateSessionTokenAndAgent = `-- name: UpdateSessionTokenAndAgent :one
UPDATE user_sessions
    SET token = $1, user_agent = $2, created_at = $3, status = $4
    WHERE email = $5
RETURNING session_id, uid, email, token, user_agent, role, created_at, status
`

type UpdateSessionTokenAndAgentParams struct {
	Token     string
	UserAgent string
	CreatedAt time.Time
	Status    bool
	Email     string
}

func (q *Queries) UpdateSessionTokenAndAgent(ctx context.Context, arg UpdateSessionTokenAndAgentParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, updateSessionTokenAndAgent,
		arg.Token,
		arg.UserAgent,
		arg.CreatedAt,
		arg.Status,
		arg.Email,
	)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.Uid,
		&i.Email,
		&i.Token,
		&i.UserAgent,
		&i.Role,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const updateUserBlogCount = `-- name: UpdateUserBlogCount :one
UPDATE users
    SET blogs_uploaded = blogs_uploaded + $1
    WHERE user_id = $2
RETURNING user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at
`

type UpdateUserBlogCountParams struct {
	BlogsUploaded sql.NullInt32
	UserID        int64
}

func (q *Queries) UpdateUserBlogCount(ctx context.Context, arg UpdateUserBlogCountParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserBlogCount, arg.BlogsUploaded, arg.UserID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.DateOfBirth,
		&i.UserAddress,
		&i.BlogsUploaded,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserDetails = `-- name: UpdateUserDetails :one
UPDATE users
    SET full_name = $1, first_name = $2, last_name = $3, date_of_birth = $4, user_address = $5, updated_at = $6
    WHERE user_id = $7
RETURNING user_id, full_name, first_name, last_name, email, role, date_of_birth, user_address, blogs_uploaded, status, created_at, updated_at
`

type UpdateUserDetailsParams struct {
	FullName    string
	FirstName   string
	LastName    string
	DateOfBirth sql.NullTime
	UserAddress sql.NullString
	UpdatedAt   sql.NullTime
	UserID      int64
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserDetails,
		arg.FullName,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.UserAddress,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.DateOfBirth,
		&i.UserAddress,
		&i.BlogsUploaded,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSessionStatus = `-- name: UpdateUserSessionStatus :exec
UPDATE user_sessions
    SET status = $1
    WHERE uid = $2
`

type UpdateUserSessionStatusParams struct {
	Status bool
	Uid    int64
}

func (q *Queries) UpdateUserSessionStatus(ctx context.Context, arg UpdateUserSessionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSessionStatus, arg.Status, arg.Uid)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users
    SET status = $1
    WHERE user_id = $2
`

type UpdateUserStatusParams struct {
	Status sql.NullBool
	UserID int64
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatus, arg.Status, arg.UserID)
	return err
}
